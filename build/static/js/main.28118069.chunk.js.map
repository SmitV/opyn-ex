{"version":3,"sources":["util.js","components/Navbar.js","components/TradeModal.js","components/App.js","reportWebVitals.js","index.js"],"names":["truncateAddress","address","substring","length","Navbar","props","state","navOptions","account","isConnected","window","ethereum","request","method","then","response","setState","connect","catch","err","code","console","log","error","className","this","map","option","href","onClick","e","connectAccounts","React","Component","TradeModal","fromValue","toValue","regExp","primaryBtnText","fromToken","name","price","Math","random","balance","toToken","showLoader","isValid","connected","inputText","target","value","test","computeToToken","val","convPrice","toFixed","fromVal","fromTokenObj","toTokenObj","preventDefault","computeTrade","parseFloat","icon","faLink","faCog","handleMaxClick","onChange","handleInputChange","inputmode","autocomplete","type","pattern","placeholder","minlength","maxlength","handleSwapArrowClick","faArrowCircleDown","conversionLogic","handleSubmit","App","connectCache","bind","connectedFlag","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28118069.chunk.js","sourcesContent":["export function truncateAddress(address) {\n    if (address) {\n        return address.substring(0, 4) + '...' + address.substring(address.length - 4, address.length);\n    }\n}","import React from 'react';\nimport { truncateAddress } from '../util';\nimport '../assets/css/Navbar.css'\n\nexport default class Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      navOptions: ['Trade', 'Analytics', 'Team', 'Contact'],\n      account: '',\n      isConnected: false,\n    }\n  }\n\n  connectAccounts() {\n    if (window.ethereum) {\n      window.ethereum\n      .request({ method: 'eth_requestAccounts' })\n      .then(response => {\n        this.setState({ account: response[0], isConnected: window.ethereum.isConnected() });\n        this.props.connect(window.ethereum.isConnected());\n      })\n      .catch((err) => {\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          // If this happens, the user rejected the connection request.\n          console.log('Please connect to MetaMask.');\n        } else {\n          console.error(err);\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <nav className=\"opyn-nav__container\">\n        <h2 className=\"opyn-nav__header\">opyn</h2>\n        <ul className=\"opyn-nav__options\">\n          {this.state.navOptions.map((option) => {\n            return (\n              <li>\n                <a href=\"#\">{option}</a>\n              </li>\n            )\n          })}\n          {this.state.isConnected ? \n            <li className=\"opyn-nav__connected-account\">{truncateAddress(this.state.account)}</li> :\n            <li>\n              <button onClick={(e) => this.connectAccounts(e)} className=\"opyn-nav__connect-btn\">Connect</button>\n            </li>\n          }\n        </ul>\n      </nav>\n    );\n  }\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog, faLink, faArrowCircleDown } from '@fortawesome/free-solid-svg-icons'\nimport '../assets/css/TradeModal.css';\n\nclass TradeModal extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            fromValue: '',\n            toValue: '',\n            regExp:  /^[0-9]*[.,]?[0-9]*$/, \n            primaryBtnText: 'Connect Wallet',\n            fromToken: { name: 'oToken', price: Math.random() * (100 - 10) + 10, balance: 1000},\n            toToken: { name: 'USDT', price: 1, balance: 10000 },\n            showLoader: false,\n            isValid: false,\n          }    \n    }\n\n    componentWillUpdate(props) {\n        if (props.connected && this.state.primaryBtnText === 'Connect Wallet') {\n            this.setState({ primaryBtnText: 'Swap' }, function(){ this.isValid() });\n        }\n    }\n\n    handleInputChange(e) {\n        const inputText = e.target.value;\n        if(inputText == '' || this.state.regExp.test(inputText)) {\n            this.setState({ [e.target.name]: inputText }, function() { this.computeToToken(inputText); this.isValid(); });\n        }\n        // this.isValid();\n    }\n\n    computeToToken(val) {\n        const convPrice = this.state.fromToken.price / this.state.toToken.price;\n        this.setState({ toValue: (convPrice * val).toFixed(2) });\n    }\n\n    isValid() {\n        const fromVal = this.state.fromValue;\n        const fromTokenObj = this.state.fromToken;\n        const toTokenObj = this.state.toToken;\n        debugger;\n\n        if (this.state.primaryBtnText !== 'Connect Wallet' &&\n            this.state.fromValue > 0 && \n            fromTokenObj.balance > 0 &&\n            toTokenObj.balance > 0 &&\n            fromVal <= fromTokenObj.balance) {\n            this.setState({ isValid: true });\n        } else {\n            this.setState({ isValid: false });\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if(this.state.primaryBtnText !== 'Connected Wallet') {\n            this.computeTrade();    \n        }\n    }\n\n    computeTrade() {\n        const fromTokenObj = this.state.fromToken;\n        const toTokenObj = this.state.toToken;\n        fromTokenObj.balance -= parseFloat(this.state.fromValue);\n        toTokenObj.balance += parseFloat(this.state.toValue);\n        this.setState({ fromValue: '', toValue: '', fromToken: fromTokenObj, toToken: toTokenObj }, function() {\n            this.isValid();\n        });\n    }\n\n    conversionLogic() {\n        if (this.state.isValid) {\n            const convPrice = this.state.fromToken.price / this.state.toToken.price;\n            return <span>1 {this.state.fromToken.name} =  {convPrice} {this.state.toToken.name}</span>\n        } else {\n            return <span>Insufficient balance, please try again</span>\n        }\n    }\n\n    handleSwapArrowClick(e) {\n        e.preventDefault();\n        this.setState({ fromToken: this.state.toToken, toToken: this.state.fromToken });\n    }\n\n    handleMaxClick(e) {\n        e.preventDefault();\n        const convPrice = this.state.fromToken.price / this.state.toToken.price;\n        this.setState({ \n            fromValue: this.state.fromToken.balance, \n            toValue: (convPrice * this.state.fromToken.balance).toFixed(2),\n        }, function() {\n            this.isValid();\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"opyn-trade__modal-container\">\n                <div className=\"opyn-trade__modal-contents\">\n                    <ul className=\"opyn-trade__setting-options\">\n                        <li>\n                            <button>\n                                <FontAwesomeIcon icon={faLink} />\n                            </button>\n                        </li>\n                        <li>\n                            <button>\n                                <FontAwesomeIcon icon={faCog} />\n                            </button>\n                        </li>\n                    </ul>\n                    <form className=\"opyn-trade__input-container\">\n                        <div>\n                            <label><span>Pay</span><a onClick={(e   ) => this.handleMaxClick(e)} href=\"#\" className=\"opyn-trade__label-span opyn-trade__label-click\">Max: {this.state.fromToken.balance}</a></label>\n                            <button className=\"opyn-trade__token-btn\">{this.state.fromToken.name}</button>\n                            <input onChange={(e) => this.handleInputChange(e)} inputmode=\"decimal\" autocomplete=\"off\" type=\"text\" pattern=\"^[0-9]*[.,]?[0-9]*$\" placeholder=\"0.0\" minlength=\"1\" maxlength=\"79\" name=\"fromValue\" value={this.state.fromValue}></input>\n                        </div>\n                        <button onClick={(e) => this.handleSwapArrowClick(e)}className=\"opyn-trade__side-swap\">\n                            <FontAwesomeIcon icon={faArrowCircleDown} />\n                        </button>\n                        <div>\n                            <label><span>Receive</span><span className=\"opyn-trade__label-span\">Available: {this.state.toToken.balance}</span></label>\n                            <button className=\"opyn-trade__token-btn\">{this.state.toToken.name}</button>\n                            <input inputmode=\"decimal\" type=\"text\" placeholder=\"0.0\" name=\"toValue\" value={this.state.toValue}></input>\n                        </div>\n                        <div className=\"opyn-trade__conv-container\">{this.conversionLogic()}</div>\n                        <ul className=\"opyn-trade__detail-container\">\n                            <li>\n                                <span>Slippage Tolerance</span>\n                                <span>0.5%</span>\n                            </li>\n                            <li>\n                                <span>Minimum Received</span>\n                                <span>0</span>\n                            </li>\n                        </ul>\n                        <button onClick={(e) => this.handleSubmit(e)} className={this.state.isValid ? \"opyn-trade__primary-btn\" : \"opyn-trade__primary-btn opyn-trade__primary-btn-invalid\"}>{this.state.primaryBtnText}</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TradeModal;\n","import React from 'react';\nimport Navbar from './Navbar';\nimport TradeModal from './TradeModal';\nimport '../assets/css/App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isConnected: false,\n    }\n    this.connectCache = this.connectCache.bind(this);\n  }\n\n  connectCache(connectedFlag) {\n    this.setState({ isConnected: connectedFlag });\n  }\n\n  render() {\n    return (\n      <div className=\"opyn-main__container\">\n        <Navbar connect={this.connectCache}/>\n        <TradeModal connected={this.state.isConnected} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}